var e='<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8">\n    <meta http-equiv="X-UA-Compatible" content="IE=edge">\n    <meta name="viewport" content="width=device-width,initial-scale=1">\n    <title>xo.JesseJesse.com</title>\n    <style>\n      #board button {\n        width: 100px;\n        height: 100px;\n        border: 1px dotted rgb(143, 141, 141);\n        transition: box-shadow 0.5s;\n        margin: 4px;\n      }\n\n      #board button[data-color=\'red\'] {\n        background-color: rgb(166, 0, 0);\n      }\n\n      #board button[data-color=\'blue\'] {\n        background-color: rgb(3, 3, 160);\n      }\n\n      #board.myturn button[data-color=\'none\'] {\n        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.35);\n      }\n\n      body {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        height: 100vh;\n        width: 100vw;\n        text-align: center;\n      }\n\n      .hidden {\n        display: none;\n      }\n    </style>\n  </head>\n\n  <body>\n    <div id="container">\n      xo.JesseJesse.com\n      <h1><svg width="564.1274902343749px" height="139.17001953124998px" xmlns="http://www.w3.org/2000/svg" viewBox="-32.063745117187466 5.414990234375011 564.1274902343749 139.17001953124998" style="background: rgba(0, 0, 0, 0);" preserveAspectRatio="xMidYMid"><defs><linearGradient id="editing-sticker-gradient" x1="0.5" y1="0.2" x2="0.5" y2="0.8"><stop offset="0" stop-color="#eb0505"></stop><stop offset="1" stop-color="#0061ee"></stop></linearGradient><filter id="editing-sticker" x="-100%" y="-100%" width="300%" height="300%"><feMorphology operator="erode" radius="1" in="SourceAlpha" result="alpha-erode"></feMorphology><feConvolveMatrix order="3,3" divisor="1" kernelMatrix="0 1 0 1 1 1 0 1 0" in="alpha-erode" result="alpha-round"></feConvolveMatrix><feMorphology operator="dilate" radius="3.5" in="alpha-round" result="dilate-shadow"></feMorphology><feGaussianBlur in="dilate-shadow" stdDeviation="1.5" result="shadow"></feGaussianBlur><feFlood flood-color="#fff" result="flood-sticker"></feFlood><feComposite operator="in" in="flood-sticker" in2="alpha-round" result="comp-sticker"></feComposite><feMorphology operator="dilate" radius="3" in="comp-sticker" result="morph-sticker"></feMorphology><feConvolveMatrix order="3,3" divisor="1" kernelMatrix="0 1 0 1 1 1 0 1 0" in="morph-sticker" result="sticker"></feConvolveMatrix><feMerge><feMergeNode in="shadow"></feMergeNode><feMergeNode in="sticker"></feMergeNode><feMergeNode in="SourceGraphic"></feMergeNode></feMerge></filter></defs><g filter="url(#editing-sticker)"><g transform="translate(33.455007553100586, 100.34500122070312)"><path d="M68.22-49.79L68.22-34.30L57.22-34.30L57.22-39.30L53.12-39.30L53.12-10.50L57.60-10.50L57.60 0L30.72 0L30.72-10.50L35.20-10.50L35.20-39.30L31.10-39.30L31.10-34.30L20.10-34.30L20.10-49.79L68.22-49.79ZM86.40-39.10L73.34-39.10L73.34-49.79L86.40-49.79L86.40-39.10ZM90.62 0L70.27 0L70.27-10.50L73.09-10.50L73.09-25.09L70.27-25.09L70.27-35.58L87.81-35.58L87.81-10.50L90.62-10.50L90.62 0ZM111.55 0.90L111.55 0.90Q102.40 0.90 97.28-3.87L97.28-3.87L97.28-3.87Q92.16-8.64 92.16-17.79L92.16-17.79L92.16-17.79Q92.16-26.94 97.28-31.71L97.28-31.71L97.28-31.71Q102.40-36.48 111.49-36.48L111.49-36.48L111.49-36.48Q115.90-36.48 119.94-35.26L119.94-35.26L119.94-35.26Q123.97-34.05 126.21-32.51L126.21-32.51L126.21-19.84L115.20-19.84L115.20-20.99L115.20-20.99Q115.20-23.10 114.30-24.10L114.30-24.10L114.30-24.10Q113.41-25.09 111.49-25.09L111.49-25.09L111.49-25.09Q107.78-25.09 107.78-20.99L107.78-20.99L107.78-15.49L107.78-15.49Q107.78-10.50 113.47-10.50L113.47-10.50L113.47-10.50Q118.78-10.50 125.82-11.65L125.82-11.65L125.82-1.60L125.82-1.60Q123.65-0.64 119.71 0.13L119.71 0.13L119.71 0.13Q115.78 0.90 111.55 0.90L111.55 0.90ZM195.46-49.79L195.46-34.30L184.45-34.30L184.45-39.30L180.35-39.30L180.35-10.50L184.83-10.50L184.83 0L157.95 0L157.95-10.50L162.43-10.50L162.43-39.30L158.34-39.30L158.34-34.30L147.33-34.30L147.33-49.79L195.46-49.79ZM230.98-10.50L233.79-10.50L233.79 0L216.90 0L216.90-4.35L216.90-4.35Q215.49-2.30 212.96-0.70L212.96-0.70L212.96-0.70Q210.43 0.90 206.78 0.90L206.78 0.90L206.78 0.90Q201.98 0.90 199.23-1.66L199.23-1.66L199.23-1.66Q196.48-4.22 196.48-8.90L196.48-8.90L196.48-8.90Q196.48-20.99 217.02-21.31L217.02-21.31L217.02-21.31Q216.83-23.49 215.36-24.29L215.36-24.29L215.36-24.29Q213.89-25.09 210.37-25.09L210.37-25.09L210.37-25.09Q207.49-25.09 204.19-24.48L204.19-24.48L204.19-24.48Q200.90-23.87 198.14-22.85L198.14-22.85L198.14-34.62L198.14-34.62Q201.54-35.46 205.50-35.97L205.50-35.97L205.50-35.97Q209.47-36.48 213.25-36.48L213.25-36.48L213.25-36.48Q222.78-36.48 226.88-33.02L226.88-33.02L226.88-33.02Q230.98-29.57 230.98-22.34L230.98-22.34L230.98-10.50ZM216.90-14.59L216.90-14.98L216.90-14.98Q214.02-14.98 212.45-14.21L212.45-14.21L212.45-14.21Q210.88-13.44 210.88-11.65L210.88-11.65L210.88-11.65Q210.88-10.56 211.55-9.89L211.55-9.89L211.55-9.89Q212.22-9.22 213.44-9.22L213.44-9.22L213.44-9.22Q215.10-9.22 216.00-10.62L216.00-10.62L216.00-10.62Q216.90-12.03 216.90-14.59L216.90-14.59ZM254.98 0.90L254.98 0.90Q245.82 0.90 240.70-3.87L240.70-3.87L240.70-3.87Q235.58-8.64 235.58-17.79L235.58-17.79L235.58-17.79Q235.58-26.94 240.70-31.71L240.70-31.71L240.70-31.71Q245.82-36.48 254.91-36.48L254.91-36.48L254.91-36.48Q259.33-36.48 263.36-35.26L263.36-35.26L263.36-35.26Q267.39-34.05 269.63-32.51L269.63-32.51L269.63-19.84L258.62-19.84L258.62-20.99L258.62-20.99Q258.62-23.10 257.73-24.10L257.73-24.10L257.73-24.10Q256.83-25.09 254.91-25.09L254.91-25.09L254.91-25.09Q251.20-25.09 251.20-20.99L251.20-20.99L251.20-15.49L251.20-15.49Q251.20-10.50 256.90-10.50L256.90-10.50L256.90-10.50Q262.21-10.50 269.25-11.65L269.25-11.65L269.25-1.60L269.25-1.60Q267.07-0.64 263.14 0.13L263.14 0.13L263.14 0.13Q259.20 0.90 254.98 0.90L254.98 0.90ZM338.88-49.79L338.88-34.30L327.87-34.30L327.87-39.30L323.78-39.30L323.78-10.50L328.26-10.50L328.26 0L301.38 0L301.38-10.50L305.86-10.50L305.86-39.30L301.76-39.30L301.76-34.30L290.75-34.30L290.75-49.79L338.88-49.79ZM355.52 0.90L355.52 0.90Q346.43 0.90 341.31-3.87L341.31-3.87L341.31-3.87Q336.19-8.64 336.19-17.79L336.19-17.79L336.19-17.79Q336.19-26.94 341.31-31.71L341.31-31.71L341.31-31.71Q346.43-36.48 355.52-36.48L355.52-36.48L355.52-36.48Q364.74-36.48 369.79-31.65L369.79-31.65L369.79-31.65Q374.85-26.82 374.85-17.79L374.85-17.79L374.85-17.79Q374.85-8.64 369.73-3.87L369.73-3.87L369.73-3.87Q364.61 0.90 355.52 0.90L355.52 0.90ZM355.52-10.50L355.52-10.50Q357.38-10.50 358.30-11.49L358.30-11.49L358.30-11.49Q359.23-12.48 359.23-14.59L359.23-14.59L359.23-20.99L359.23-20.99Q359.23-23.10 358.30-24.10L358.30-24.10L358.30-24.10Q357.38-25.09 355.52-25.09L355.52-25.09L355.52-25.09Q353.66-25.09 352.74-24.10L352.74-24.10L352.74-24.10Q351.81-23.10 351.81-20.99L351.81-20.99L351.81-14.59L351.81-14.59Q351.81-12.48 352.74-11.49L352.74-11.49L352.74-11.49Q353.66-10.50 355.52-10.50L355.52-10.50ZM395.97 0.90L395.97 0.90Q386.88 0.90 381.76-3.87L381.76-3.87L381.76-3.87Q376.64-8.64 376.64-17.79L376.64-17.79L376.64-17.79Q376.64-26.94 381.76-31.71L381.76-31.71L381.76-31.71Q386.88-36.48 395.97-36.48L395.97-36.48L395.97-36.48Q404.99-36.48 408.99-31.78L408.99-31.78L408.99-31.78Q412.99-27.07 412.99-20.10L412.99-20.10L412.99-15.49L392.26-15.49L392.26-15.10L392.26-15.10Q392.26-12.74 393.66-11.62L393.66-11.62L393.66-11.62Q395.07-10.50 398.34-10.50L398.34-10.50L398.34-10.50Q402.24-10.50 405.76-11.07L405.76-11.07L405.76-11.07Q409.28-11.65 411.90-12.54L411.90-12.54L411.90-2.30L411.90-2.30Q409.66-1.09 405.34-0.10L405.34-0.10L405.34-0.10Q401.02 0.90 395.97 0.90L395.97 0.90ZM392.26-22.53L399.68-22.53L399.68-23.30L399.68-23.30Q399.68-25.47 398.75-26.43L398.75-26.43L398.75-26.43Q397.82-27.39 395.97-27.39L395.97-27.39L395.97-27.39Q394.11-27.39 393.18-26.40L393.18-26.40L393.18-26.40Q392.26-25.41 392.26-23.30L392.26-23.30L392.26-22.53Z" fill="url(#editing-sticker-gradient)" stroke="#040404" stroke-width="4"></path></g></g><style>text {\n  font-size: 64px;\n  font-family: Arial Black;\n  dominant-baseline: central;\n  text-anchor: middle;\n      }</style></svg><br></h1>\n\n      <form id="joinGameForm">\n        <label for="gameNameInput">Game ID:</label>\n        <input type="text" name="gameName" id="gameNameInput" value="719">\n        <button type="submit">Join or Create Game</button>\n      </form>\n\n      <br>\n\n      <div id="gameContainer" class="hidden">\n        Your color: <span id="myColor">???</span>.\n        <span id="instruction">Waiting for an opponent to join...</span>\n        <button id="reset" class="hidden">Reset</button>\n\n        <br>\n\n        <div id="board">\n          \x3c!-- will be created dynamically --\x3e\n        </div>\n\n        <br>\n      </div>\n      made with &hearts;&nbsp;by&nbsp;<a href="https://twitter.com/ilostmyipad/">@iLostmyipad</a>\n    </div>\n\n    <script>\n      const joinGameForm = document.getElementById(\'joinGameForm\');\n      const myColorSpan = document.getElementById(\'myColor\');\n      const instructionSpan = document.getElementById(\'instruction\');\n      const boardContainer = document.getElementById(\'board\');\n      const gameContainer = document.getElementById(\'gameContainer\');\n      const resetButton = document.getElementById(\'reset\');\n\n      const state = {\n        ready: false,\n        playerCount: 1,\n        fieldValues: [\n          [\'none\', \'none\', \'none\'],\n          [\'none\', \'none\', \'none\'],\n          [\'none\', \'none\', \'none\'],\n        ],\n        turn: \'none\',\n        winner: null,\n        color: \'none\',\n      };\n\n      /**\n       * Holds the web socket that connects to the current game instance.\n       * @type {WebSocket}\n       */\n      let currentWebSocket = null;\n\n      /**\n       * Applies the colors from the state to the game board. This should be called whenever any field color changes.\n       */\n      function updateBoardColors() {\n        state.fieldValues.forEach((rowArray, rowNum) => {\n          rowArray.forEach((value, colNum) => {\n            fields[rowNum][colNum].dataset.color = value;\n          });\n        });\n      }\n\n      /**\n       * Updates the instructions for the player, based on state data. This should be called on every state change.\n       */\n      function updateInstruction() {\n        let text = \'\';\n        let myTurn = false;\n\n        if (!state.ready) {\n          // waiting for data\n          text = \'Waiting for data...\';\n          myTurn = false;\n        } else if (state.playerCount === 1) {\n          // not waiting for data, paused\n          text = \'Waiting for an opponent to join...\';\n          myTurn = false;\n        } else if (state.winner !== null) {\n          // not waiting for data, not paused, game over\n          text = `Game over: ${\n            state.winner === \'none\' ? \'nobody\' : state.winner\n          } Victory!`;\n          myTurn = false;\n        } else if (state.turn === state.color) {\n          // not waiting for data, not paused, not game over, my turn\n          text = "It\'s your turn!";\n          myTurn = true;\n        } else {\n          // not waiting for data, not paused, not game over, not my turn\n          text = `Waiting for ${state.turn} to make their move...`;\n          myTurn = false;\n        }\n\n        instructionSpan.innerText = text;\n        if (myTurn) {\n          boardContainer.classList.add(\'myturn\');\n        } else {\n          boardContainer.classList.remove(\'myturn\');\n        }\n      }\n\n      /**\n       * Updates the color display and enables/disables capabilities based on the player color.\n       */\n      function updateColor() {\n        myColorSpan.innerText = state.color;\n        if (state.color !== \'none\') {\n          resetButton.classList.remove(\'hidden\');\n        } else {\n          state.color.classList.add(\'hidden\');\n        }\n      }\n\n      async function joinGame(gameName) {\n        const newSocket = new WebSocket(\n          `${window.location.protocol === \'https:\' ? \'wss\' : \'ws\'}://${\n            window.location.hostname\n          }:${window.location.port}/api/game/${gameName}`,\n        );\n        newSocket.addEventListener(\'open\', (event) => {\n          currentWebSocket = newSocket;\n          instructionSpan.innerText = \'Connected, waiting for game data...\'; //TODO reset\n          gameContainer.classList.remove(\'hidden\');\n        });\n        newSocket.addEventListener(\'message\', (event) => {\n          const message = JSON.parse(event.data);\n\n          switch (message.type) {\n            case \'color\':\n              state.color = message.color;\n\n              updateInstruction();\n              updateColor();\n              break;\n            case \'state\':\n              state.fieldValues = message.fields;\n              state.turn = message.turn;\n              state.winner = message.winner;\n\n              updateInstruction();\n              updateBoardColors();\n              break;\n            case \'players\':\n              state.playerCount = message.playerCount;\n              state.ready = true;\n\n              updateInstruction();\n              break;\n            default:\n              alert(\'Received invalid message: \' + event.data);\n              break;\n          }\n        });\n        newSocket.addEventListener(\'error\', (event) => {\n          alert(`Error in web socket: ${event.toString()}`);\n          console.dir(event);\n          currentWebSocket.close(1000);\n        });\n        newSocket.addEventListener(\'close\', (event) => {\n          gameContainer.classList.remove(\'hidden\');\n          currentWebSocket = null;\n          state.ready = false;\n          alert(\'Disconnected!\');\n        });\n      }\n\n      /**\n       * @param {SubmitEvent} event#\n       */\n      function clickJoinGame(event) {\n        let gameName = document.getElementById(\'gameNameInput\').value;\n        if (!/^[0-9a-zA-Z]+$/.test(gameName)) {\n          alert(\'Hey! what are u thinking? you can only use letters and numbers.\');\n        } else {\n          if (currentWebSocket !== null) {\n            gameContainer.classList.add(\'hidden\');\n            currentWebSocket.close(1000);\n            currentWebSocket = null;\n          }\n          joinGame(gameName);\n        }\n        return false; // cancel submission\n      }\n\n      joinGameForm.onsubmit = clickJoinGame;\n\n      function clickField(element, rowNum, colNum) {\n        if (boardContainer.classList.contains(\'myturn\')) {\n          currentWebSocket.send(\n            JSON.stringify({ type: \'move\', row: rowNum, col: colNum }),\n          );\n        }\n      }\n\n      /** @type HTMLElement[][] */\n      const fields = [];\n      for (let row = 0; row < 3; row++) {\n        fields.push([]);\n        let rowDiv = document.createElement(\'div\');\n        boardContainer.appendChild(rowDiv);\n        for (let col = 0; col < 3; col++) {\n          let el = document.createElement(\'button\');\n          el.onclick = (event) => clickField(el, row, col);\n          el.dataset.color = \'none\';\n          fields[row].push(el);\n          rowDiv.appendChild(el);\n        }\n      }\n\n      function clickReset() {\n        currentWebSocket.send(JSON.stringify({ type: \'reset\' }));\n      }\n\n      resetButton.onclick = clickReset;\n    <\/script>\n  </body>\n</html>\n';async function n(n,t){const s=new URL(n.url).pathname;return"/"===s?new Response(e,{headers:{"Content-Type":"text/html;charset=UTF-8"}}):s.startsWith("/api/game/")?await async function(e,n){const t=new URL(e.url).pathname.substr("/api/game/".length);if(!/^[0-9a-zA-Z]+$/.test(t))return new Response("game name may only contain letters and digits!");const s=n.GAMEINSTANCE.get(n.GAMEINSTANCE.idFromName(t));return await s.fetch(e.url,e)}(n,t):new Response("Not found")}function t(){const e=[];for(let n=0;n<3;n++){e.push([]);for(let t=0;t<3;t++)e[n].push("none")}return e}class s{fields;constructor(e){this.fields=void 0===e?t():e}isMatchingLine(e,n,t,s){const o=this.fields[e][n];if("none"===o)return"none";for(let r=1;r<3;r++)if(this.fields[e+t*r][n+s*r]!==o)return"none";return o}findWinningColor(){for(let e=0;e<3;e++){const n=this.isMatchingLine(e,0,0,1);if("none"!==n)return n}for(let e=0;e<3;e++){const n=this.isMatchingLine(0,e,1,0);if("none"!==n)return n}const e=this.isMatchingLine(0,0,1,1);if("none"!==e)return e;const n=this.isMatchingLine(2,0,-1,1);return"none"!==n?n:"none"}isFull(){for(let e=0;e<3;e++)for(let n=0;n<3;n++)if("none"===this.fields[e][n])return!1;return!0}reset(){this.fields=t()}getColor(e,n){return this.fields[e][n]}hasColor(e,n){return"none"!==this.fields[e][n]}setColor(e,n,t){this.fields[e][n]=t}}class o{board;nextTurn;_winner=null;get winner(){return this._winner}constructor(e){void 0!==e?(this.board=new s(e.fields),this.nextTurn=e.turn,this.recalculateWinner()):(this.board=new s,this.nextTurn="red")}recalculateWinner(){const e=this.board.findWinningColor();"none"!==e?this._winner=e:this.board.isFull()?this._winner="none":this._winner=null}isGameOver(){return null!==this.winner}canPlaceColor(e,n,t){return!this.isGameOver()&&this.nextTurn===e&&!this.board.hasColor(n,t)}placeColor(e,n,t){if(!this.canPlaceColor(e,n,t))throw new Error("Invalid move!");this.board.setColor(n,t,e),this.recalculateWinner(),this.isGameOver()?this.nextTurn="none":this.nextTurn=function(e){return"red"===e?"blue":"red"}(this.nextTurn)}serialize(){return{fields:this.board.fields,turn:this.nextTurn}}}function r(e){return{type:"color",color:e}}function a(e){return{type:"players",playerCount:e}}class i{color;socket;constructor(e,n){this.color=e,this.socket=n}sendMessage(e){this.socket.send(JSON.stringify(e))}sendErrorMessage(e){const n={type:"error",message:e};this.sendMessage(n)}}class l{sessions=[];add(e){this.sessions.push(e)}remove(e){this.sessions=this.sessions.filter((n=>n!==e))}broadcast(e){this.sessions.forEach((n=>n.sendMessage(e)))}get length(){return this.sessions.length}findWithColor(e){for(let n=0;n<this.sessions.length;n++)if(this.sessions[n].color===e)return this.sessions[n]}findNextColor(){return void 0===this.findWithColor("red")?"red":void 0===this.findWithColor("blue")?"blue":"none"}}class c{state;env;game=new o;sessions=new l;constructor(e,n){this.state=e,this.env=n,this.state.blockConcurrencyWhile((async()=>await this.loadState()))}async loadState(){const e=await(this.state.storage?.get("game"));this.game=new o(e)}async saveState(){await(this.state.storage?.put("game",this.game.serialize()))}createStateMessage(){const e=this.game.serialize();return{type:"state",fields:e.fields,turn:e.turn,winner:this.game.winner}}async reset(){this.game=new o,await(this.state.storage?.deleteAll())}async fetch(e){if("websocket"!==e.headers.get("Upgrade"))return new Response("Expected Upgrade: websocket",{status:426});const n=new WebSocketPair,t=n[0],s=n[1],o=new i(this.sessions.findNextColor(),s);return s.addEventListener("message",(async e=>this.onMessageReceived(o,e))),s.addEventListener("close",(async()=>this.onSocketClose(o))),s.accept(),this.sessions.add(o),o.sendMessage(r(o.color)),o.sendMessage(this.createStateMessage()),this.sessions.broadcast(a(this.sessions.length)),new Response(null,{status:101,webSocket:t})}async onMessageReceived(e,n){if("string"!=typeof n.data)return void e.sendErrorMessage("WebSocket message is not a string! Did you forget to JSON.stringify()?");let t;try{t=JSON.parse(n.data)}catch(n){return void e.sendErrorMessage("WebSocket message is not valid JSON!")}if("object"!=typeof t||"string"!=typeof t.type)return void e.sendErrorMessage("WebSocket messages must be objects with a `type` string attribute!");const s=t;switch(s.type){case"move":if("number"!=typeof t.row||"number"!=typeof t.col)return void e.sendErrorMessage("`move` messages must have a numeric `row` and `col` value!");await this.handleMoveMessage(e,s);break;case"reset":await this.handleResetMessage(e);break;default:e.sendErrorMessage(`'${s.type}' is not a valid message type!`)}}async onSocketClose(e){if(this.sessions.remove(e),"none"!==e.color){const n=this.sessions.findWithColor("none");void 0!==n&&(n.color=e.color,n.sendMessage(r(e.color)),n.sendMessage(this.createStateMessage()))}this.sessions.broadcast(a(this.sessions.length))}async handleMoveMessage(e,n){"none"===e.color?e.sendErrorMessage("Spectators can't place colors!"):this.game.canPlaceColor(e.color,n.row,n.col)?this.sessions.length<2?e.sendErrorMessage("The game is paused!"):(this.game.placeColor(e.color,n.row,n.col),await this.saveState(),this.sessions.broadcast(this.createStateMessage())):e.sendErrorMessage("Invalid move!")}async handleResetMessage(e){"none"!==e.color?(await this.reset(),this.sessions.broadcast(this.createStateMessage())):e.sendErrorMessage("You can not reset a game in which you do not participate!")}}var d={async fetch(e,t){try{return await n(e,t)}catch(e){return console.error(e),new Response(`${e}`,{status:500})}}};export{c as GameInstance,d as default};
//# sourceMappingURL=index.mjs.map
